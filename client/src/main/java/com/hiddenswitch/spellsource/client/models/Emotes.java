/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * The lines of dialogue that champions use for their emotes 
 */
@ApiModel(description = "The lines of dialogue that champions use for their emotes ")
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class Emotes implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("opener")
  private String opener = null;

  @JsonProperty("mirrorOpener")
  private String mirrorOpener = null;

  @JsonProperty("hello")
  private String hello = null;

  @JsonProperty("mirrorHello")
  private String mirrorHello = null;

  @JsonProperty("wellPlayed")
  private String wellPlayed = null;

  @JsonProperty("goodGame")
  private String goodGame = null;

  @JsonProperty("thanks")
  private String thanks = null;

  @JsonProperty("sorry")
  private String sorry = null;

  @JsonProperty("wow")
  private String wow = null;

  @JsonProperty("oops")
  private String oops = null;

  @JsonProperty("threaten")
  private String threaten = null;

  @JsonProperty("attack")
  private String attack = null;

  @JsonProperty("concede")
  private String concede = null;

  @JsonProperty("thinking1")
  private String thinking1 = null;

  @JsonProperty("thinking2")
  private String thinking2 = null;

  @JsonProperty("thinking3")
  private String thinking3 = null;

  @JsonProperty("outOfTime")
  private String outOfTime = null;

  @JsonProperty("almostOutOfCards")
  private String almostOutOfCards = null;

  @JsonProperty("outOfCards")
  private String outOfCards = null;

  @JsonProperty("genericError")
  private String genericError = null;

  @JsonProperty("tooManyMinions")
  private String tooManyMinions = null;

  @JsonProperty("handTooFull")
  private String handTooFull = null;

  @JsonProperty("championAlreadyAttacked")
  private String championAlreadyAttacked = null;

  @JsonProperty("minionNotReady")
  private String minionNotReady = null;

  @JsonProperty("minionAlreadyAttacked")
  private String minionAlreadyAttacked = null;

  @JsonProperty("notEnoughLun")
  private String notEnoughLun = null;

  @JsonProperty("needAWeapon")
  private String needAWeapon = null;

  @JsonProperty("cantTargetHidden")
  private String cantTargetHidden = null;

  @JsonProperty("notValidTarget")
  private String notValidTarget = null;

  @JsonProperty("mustAttackGuard")
  private String mustAttackGuard = null;

  @JsonProperty("death")
  private String death = null;

  public Emotes opener(String opener) {
    this.opener = opener;
    return this;
  }

   /**
   * Get opener
   * @return opener
  **/
  @ApiModelProperty(value = "")
  public String getOpener() {
    return opener;
  }

  public void setOpener(String opener) {
    this.opener = opener;
  }

  public Emotes mirrorOpener(String mirrorOpener) {
    this.mirrorOpener = mirrorOpener;
    return this;
  }

   /**
   * Get mirrorOpener
   * @return mirrorOpener
  **/
  @ApiModelProperty(value = "")
  public String getMirrorOpener() {
    return mirrorOpener;
  }

  public void setMirrorOpener(String mirrorOpener) {
    this.mirrorOpener = mirrorOpener;
  }

  public Emotes hello(String hello) {
    this.hello = hello;
    return this;
  }

   /**
   * Get hello
   * @return hello
  **/
  @ApiModelProperty(value = "")
  public String getHello() {
    return hello;
  }

  public void setHello(String hello) {
    this.hello = hello;
  }

  public Emotes mirrorHello(String mirrorHello) {
    this.mirrorHello = mirrorHello;
    return this;
  }

   /**
   * Get mirrorHello
   * @return mirrorHello
  **/
  @ApiModelProperty(value = "")
  public String getMirrorHello() {
    return mirrorHello;
  }

  public void setMirrorHello(String mirrorHello) {
    this.mirrorHello = mirrorHello;
  }

  public Emotes wellPlayed(String wellPlayed) {
    this.wellPlayed = wellPlayed;
    return this;
  }

   /**
   * Get wellPlayed
   * @return wellPlayed
  **/
  @ApiModelProperty(value = "")
  public String getWellPlayed() {
    return wellPlayed;
  }

  public void setWellPlayed(String wellPlayed) {
    this.wellPlayed = wellPlayed;
  }

  public Emotes goodGame(String goodGame) {
    this.goodGame = goodGame;
    return this;
  }

   /**
   * Get goodGame
   * @return goodGame
  **/
  @ApiModelProperty(value = "")
  public String getGoodGame() {
    return goodGame;
  }

  public void setGoodGame(String goodGame) {
    this.goodGame = goodGame;
  }

  public Emotes thanks(String thanks) {
    this.thanks = thanks;
    return this;
  }

   /**
   * Get thanks
   * @return thanks
  **/
  @ApiModelProperty(value = "")
  public String getThanks() {
    return thanks;
  }

  public void setThanks(String thanks) {
    this.thanks = thanks;
  }

  public Emotes sorry(String sorry) {
    this.sorry = sorry;
    return this;
  }

   /**
   * Get sorry
   * @return sorry
  **/
  @ApiModelProperty(value = "")
  public String getSorry() {
    return sorry;
  }

  public void setSorry(String sorry) {
    this.sorry = sorry;
  }

  public Emotes wow(String wow) {
    this.wow = wow;
    return this;
  }

   /**
   * Get wow
   * @return wow
  **/
  @ApiModelProperty(value = "")
  public String getWow() {
    return wow;
  }

  public void setWow(String wow) {
    this.wow = wow;
  }

  public Emotes oops(String oops) {
    this.oops = oops;
    return this;
  }

   /**
   * Get oops
   * @return oops
  **/
  @ApiModelProperty(value = "")
  public String getOops() {
    return oops;
  }

  public void setOops(String oops) {
    this.oops = oops;
  }

  public Emotes threaten(String threaten) {
    this.threaten = threaten;
    return this;
  }

   /**
   * Get threaten
   * @return threaten
  **/
  @ApiModelProperty(value = "")
  public String getThreaten() {
    return threaten;
  }

  public void setThreaten(String threaten) {
    this.threaten = threaten;
  }

  public Emotes attack(String attack) {
    this.attack = attack;
    return this;
  }

   /**
   * Get attack
   * @return attack
  **/
  @ApiModelProperty(value = "")
  public String getAttack() {
    return attack;
  }

  public void setAttack(String attack) {
    this.attack = attack;
  }

  public Emotes concede(String concede) {
    this.concede = concede;
    return this;
  }

   /**
   * Get concede
   * @return concede
  **/
  @ApiModelProperty(value = "")
  public String getConcede() {
    return concede;
  }

  public void setConcede(String concede) {
    this.concede = concede;
  }

  public Emotes thinking1(String thinking1) {
    this.thinking1 = thinking1;
    return this;
  }

   /**
   * Get thinking1
   * @return thinking1
  **/
  @ApiModelProperty(value = "")
  public String getThinking1() {
    return thinking1;
  }

  public void setThinking1(String thinking1) {
    this.thinking1 = thinking1;
  }

  public Emotes thinking2(String thinking2) {
    this.thinking2 = thinking2;
    return this;
  }

   /**
   * Get thinking2
   * @return thinking2
  **/
  @ApiModelProperty(value = "")
  public String getThinking2() {
    return thinking2;
  }

  public void setThinking2(String thinking2) {
    this.thinking2 = thinking2;
  }

  public Emotes thinking3(String thinking3) {
    this.thinking3 = thinking3;
    return this;
  }

   /**
   * Get thinking3
   * @return thinking3
  **/
  @ApiModelProperty(value = "")
  public String getThinking3() {
    return thinking3;
  }

  public void setThinking3(String thinking3) {
    this.thinking3 = thinking3;
  }

  public Emotes outOfTime(String outOfTime) {
    this.outOfTime = outOfTime;
    return this;
  }

   /**
   * Get outOfTime
   * @return outOfTime
  **/
  @ApiModelProperty(value = "")
  public String getOutOfTime() {
    return outOfTime;
  }

  public void setOutOfTime(String outOfTime) {
    this.outOfTime = outOfTime;
  }

  public Emotes almostOutOfCards(String almostOutOfCards) {
    this.almostOutOfCards = almostOutOfCards;
    return this;
  }

   /**
   * Get almostOutOfCards
   * @return almostOutOfCards
  **/
  @ApiModelProperty(value = "")
  public String getAlmostOutOfCards() {
    return almostOutOfCards;
  }

  public void setAlmostOutOfCards(String almostOutOfCards) {
    this.almostOutOfCards = almostOutOfCards;
  }

  public Emotes outOfCards(String outOfCards) {
    this.outOfCards = outOfCards;
    return this;
  }

   /**
   * Get outOfCards
   * @return outOfCards
  **/
  @ApiModelProperty(value = "")
  public String getOutOfCards() {
    return outOfCards;
  }

  public void setOutOfCards(String outOfCards) {
    this.outOfCards = outOfCards;
  }

  public Emotes genericError(String genericError) {
    this.genericError = genericError;
    return this;
  }

   /**
   * Get genericError
   * @return genericError
  **/
  @ApiModelProperty(value = "")
  public String getGenericError() {
    return genericError;
  }

  public void setGenericError(String genericError) {
    this.genericError = genericError;
  }

  public Emotes tooManyMinions(String tooManyMinions) {
    this.tooManyMinions = tooManyMinions;
    return this;
  }

   /**
   * Get tooManyMinions
   * @return tooManyMinions
  **/
  @ApiModelProperty(value = "")
  public String getTooManyMinions() {
    return tooManyMinions;
  }

  public void setTooManyMinions(String tooManyMinions) {
    this.tooManyMinions = tooManyMinions;
  }

  public Emotes handTooFull(String handTooFull) {
    this.handTooFull = handTooFull;
    return this;
  }

   /**
   * Get handTooFull
   * @return handTooFull
  **/
  @ApiModelProperty(value = "")
  public String getHandTooFull() {
    return handTooFull;
  }

  public void setHandTooFull(String handTooFull) {
    this.handTooFull = handTooFull;
  }

  public Emotes championAlreadyAttacked(String championAlreadyAttacked) {
    this.championAlreadyAttacked = championAlreadyAttacked;
    return this;
  }

   /**
   * Get championAlreadyAttacked
   * @return championAlreadyAttacked
  **/
  @ApiModelProperty(value = "")
  public String getChampionAlreadyAttacked() {
    return championAlreadyAttacked;
  }

  public void setChampionAlreadyAttacked(String championAlreadyAttacked) {
    this.championAlreadyAttacked = championAlreadyAttacked;
  }

  public Emotes minionNotReady(String minionNotReady) {
    this.minionNotReady = minionNotReady;
    return this;
  }

   /**
   * Get minionNotReady
   * @return minionNotReady
  **/
  @ApiModelProperty(value = "")
  public String getMinionNotReady() {
    return minionNotReady;
  }

  public void setMinionNotReady(String minionNotReady) {
    this.minionNotReady = minionNotReady;
  }

  public Emotes minionAlreadyAttacked(String minionAlreadyAttacked) {
    this.minionAlreadyAttacked = minionAlreadyAttacked;
    return this;
  }

   /**
   * Get minionAlreadyAttacked
   * @return minionAlreadyAttacked
  **/
  @ApiModelProperty(value = "")
  public String getMinionAlreadyAttacked() {
    return minionAlreadyAttacked;
  }

  public void setMinionAlreadyAttacked(String minionAlreadyAttacked) {
    this.minionAlreadyAttacked = minionAlreadyAttacked;
  }

  public Emotes notEnoughLun(String notEnoughLun) {
    this.notEnoughLun = notEnoughLun;
    return this;
  }

   /**
   * Get notEnoughLun
   * @return notEnoughLun
  **/
  @ApiModelProperty(value = "")
  public String getNotEnoughLun() {
    return notEnoughLun;
  }

  public void setNotEnoughLun(String notEnoughLun) {
    this.notEnoughLun = notEnoughLun;
  }

  public Emotes needAWeapon(String needAWeapon) {
    this.needAWeapon = needAWeapon;
    return this;
  }

   /**
   * Get needAWeapon
   * @return needAWeapon
  **/
  @ApiModelProperty(value = "")
  public String getNeedAWeapon() {
    return needAWeapon;
  }

  public void setNeedAWeapon(String needAWeapon) {
    this.needAWeapon = needAWeapon;
  }

  public Emotes cantTargetHidden(String cantTargetHidden) {
    this.cantTargetHidden = cantTargetHidden;
    return this;
  }

   /**
   * Get cantTargetHidden
   * @return cantTargetHidden
  **/
  @ApiModelProperty(value = "")
  public String getCantTargetHidden() {
    return cantTargetHidden;
  }

  public void setCantTargetHidden(String cantTargetHidden) {
    this.cantTargetHidden = cantTargetHidden;
  }

  public Emotes notValidTarget(String notValidTarget) {
    this.notValidTarget = notValidTarget;
    return this;
  }

   /**
   * Get notValidTarget
   * @return notValidTarget
  **/
  @ApiModelProperty(value = "")
  public String getNotValidTarget() {
    return notValidTarget;
  }

  public void setNotValidTarget(String notValidTarget) {
    this.notValidTarget = notValidTarget;
  }

  public Emotes mustAttackGuard(String mustAttackGuard) {
    this.mustAttackGuard = mustAttackGuard;
    return this;
  }

   /**
   * Get mustAttackGuard
   * @return mustAttackGuard
  **/
  @ApiModelProperty(value = "")
  public String getMustAttackGuard() {
    return mustAttackGuard;
  }

  public void setMustAttackGuard(String mustAttackGuard) {
    this.mustAttackGuard = mustAttackGuard;
  }

  public Emotes death(String death) {
    this.death = death;
    return this;
  }

   /**
   * Get death
   * @return death
  **/
  @ApiModelProperty(value = "")
  public String getDeath() {
    return death;
  }

  public void setDeath(String death) {
    this.death = death;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emotes emotes = (Emotes) o;
    return Objects.equals(this.opener, emotes.opener) &&
        Objects.equals(this.mirrorOpener, emotes.mirrorOpener) &&
        Objects.equals(this.hello, emotes.hello) &&
        Objects.equals(this.mirrorHello, emotes.mirrorHello) &&
        Objects.equals(this.wellPlayed, emotes.wellPlayed) &&
        Objects.equals(this.goodGame, emotes.goodGame) &&
        Objects.equals(this.thanks, emotes.thanks) &&
        Objects.equals(this.sorry, emotes.sorry) &&
        Objects.equals(this.wow, emotes.wow) &&
        Objects.equals(this.oops, emotes.oops) &&
        Objects.equals(this.threaten, emotes.threaten) &&
        Objects.equals(this.attack, emotes.attack) &&
        Objects.equals(this.concede, emotes.concede) &&
        Objects.equals(this.thinking1, emotes.thinking1) &&
        Objects.equals(this.thinking2, emotes.thinking2) &&
        Objects.equals(this.thinking3, emotes.thinking3) &&
        Objects.equals(this.outOfTime, emotes.outOfTime) &&
        Objects.equals(this.almostOutOfCards, emotes.almostOutOfCards) &&
        Objects.equals(this.outOfCards, emotes.outOfCards) &&
        Objects.equals(this.genericError, emotes.genericError) &&
        Objects.equals(this.tooManyMinions, emotes.tooManyMinions) &&
        Objects.equals(this.handTooFull, emotes.handTooFull) &&
        Objects.equals(this.championAlreadyAttacked, emotes.championAlreadyAttacked) &&
        Objects.equals(this.minionNotReady, emotes.minionNotReady) &&
        Objects.equals(this.minionAlreadyAttacked, emotes.minionAlreadyAttacked) &&
        Objects.equals(this.notEnoughLun, emotes.notEnoughLun) &&
        Objects.equals(this.needAWeapon, emotes.needAWeapon) &&
        Objects.equals(this.cantTargetHidden, emotes.cantTargetHidden) &&
        Objects.equals(this.notValidTarget, emotes.notValidTarget) &&
        Objects.equals(this.mustAttackGuard, emotes.mustAttackGuard) &&
        Objects.equals(this.death, emotes.death);
  }

  @Override
  public int hashCode() {
    return Objects.hash(opener, mirrorOpener, hello, mirrorHello, wellPlayed, goodGame, thanks, sorry, wow, oops, threaten, attack, concede, thinking1, thinking2, thinking3, outOfTime, almostOutOfCards, outOfCards, genericError, tooManyMinions, handTooFull, championAlreadyAttacked, minionNotReady, minionAlreadyAttacked, notEnoughLun, needAWeapon, cantTargetHidden, notValidTarget, mustAttackGuard, death);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emotes {\n");
    
    sb.append("    opener: ").append(toIndentedString(opener)).append("\n");
    sb.append("    mirrorOpener: ").append(toIndentedString(mirrorOpener)).append("\n");
    sb.append("    hello: ").append(toIndentedString(hello)).append("\n");
    sb.append("    mirrorHello: ").append(toIndentedString(mirrorHello)).append("\n");
    sb.append("    wellPlayed: ").append(toIndentedString(wellPlayed)).append("\n");
    sb.append("    goodGame: ").append(toIndentedString(goodGame)).append("\n");
    sb.append("    thanks: ").append(toIndentedString(thanks)).append("\n");
    sb.append("    sorry: ").append(toIndentedString(sorry)).append("\n");
    sb.append("    wow: ").append(toIndentedString(wow)).append("\n");
    sb.append("    oops: ").append(toIndentedString(oops)).append("\n");
    sb.append("    threaten: ").append(toIndentedString(threaten)).append("\n");
    sb.append("    attack: ").append(toIndentedString(attack)).append("\n");
    sb.append("    concede: ").append(toIndentedString(concede)).append("\n");
    sb.append("    thinking1: ").append(toIndentedString(thinking1)).append("\n");
    sb.append("    thinking2: ").append(toIndentedString(thinking2)).append("\n");
    sb.append("    thinking3: ").append(toIndentedString(thinking3)).append("\n");
    sb.append("    outOfTime: ").append(toIndentedString(outOfTime)).append("\n");
    sb.append("    almostOutOfCards: ").append(toIndentedString(almostOutOfCards)).append("\n");
    sb.append("    outOfCards: ").append(toIndentedString(outOfCards)).append("\n");
    sb.append("    genericError: ").append(toIndentedString(genericError)).append("\n");
    sb.append("    tooManyMinions: ").append(toIndentedString(tooManyMinions)).append("\n");
    sb.append("    handTooFull: ").append(toIndentedString(handTooFull)).append("\n");
    sb.append("    championAlreadyAttacked: ").append(toIndentedString(championAlreadyAttacked)).append("\n");
    sb.append("    minionNotReady: ").append(toIndentedString(minionNotReady)).append("\n");
    sb.append("    minionAlreadyAttacked: ").append(toIndentedString(minionAlreadyAttacked)).append("\n");
    sb.append("    notEnoughLun: ").append(toIndentedString(notEnoughLun)).append("\n");
    sb.append("    needAWeapon: ").append(toIndentedString(needAWeapon)).append("\n");
    sb.append("    cantTargetHidden: ").append(toIndentedString(cantTargetHidden)).append("\n");
    sb.append("    notValidTarget: ").append(toIndentedString(notValidTarget)).append("\n");
    sb.append("    mustAttackGuard: ").append(toIndentedString(mustAttackGuard)).append("\n");
    sb.append("    death: ").append(toIndentedString(death)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

